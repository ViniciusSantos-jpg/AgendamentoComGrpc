# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import agendamento_pb2 as agendamento__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agendamento_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgendamentoMedicoStub(object):
    """Definição do serviço de agendamento
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AgendarConsulta = channel.unary_unary(
                '/agendamento.AgendamentoMedico/AgendarConsulta',
                request_serializer=agendamento__pb2.AgendarConsultaRequest.SerializeToString,
                response_deserializer=agendamento__pb2.AgendarConsultaResponse.FromString,
                _registered_method=True)
        self.ListarConsultas = channel.unary_unary(
                '/agendamento.AgendamentoMedico/ListarConsultas',
                request_serializer=agendamento__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=agendamento__pb2.ListarConsultasResponse.FromString,
                _registered_method=True)
        self.VerificarDisponibilidade = channel.unary_unary(
                '/agendamento.AgendamentoMedico/VerificarDisponibilidade',
                request_serializer=agendamento__pb2.VerificarDisponibilidadeRequest.SerializeToString,
                response_deserializer=agendamento__pb2.VerificarDisponibilidadeResponse.FromString,
                _registered_method=True)
        self.CancelarConsulta = channel.unary_unary(
                '/agendamento.AgendamentoMedico/CancelarConsulta',
                request_serializer=agendamento__pb2.CancelarConsultaRequest.SerializeToString,
                response_deserializer=agendamento__pb2.CancelarConsultaResponse.FromString,
                _registered_method=True)
        self.InscreverParaAtualizacoes = channel.unary_stream(
                '/agendamento.AgendamentoMedico/InscreverParaAtualizacoes',
                request_serializer=agendamento__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=agendamento__pb2.ListarConsultasResponse.FromString,
                _registered_method=True)


class AgendamentoMedicoServicer(object):
    """Definição do serviço de agendamento
    """

    def AgendarConsulta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarConsultas(self, request, context):
        """MUDANÇA: O ListarConsultas agora é usado apenas para a primeira carga.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerificarDisponibilidade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelarConsulta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InscreverParaAtualizacoes(self, request, context):
        """NOVO: RPC que envia um stream de atualizações para o cliente.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgendamentoMedicoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AgendarConsulta': grpc.unary_unary_rpc_method_handler(
                    servicer.AgendarConsulta,
                    request_deserializer=agendamento__pb2.AgendarConsultaRequest.FromString,
                    response_serializer=agendamento__pb2.AgendarConsultaResponse.SerializeToString,
            ),
            'ListarConsultas': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarConsultas,
                    request_deserializer=agendamento__pb2.SubscribeRequest.FromString,
                    response_serializer=agendamento__pb2.ListarConsultasResponse.SerializeToString,
            ),
            'VerificarDisponibilidade': grpc.unary_unary_rpc_method_handler(
                    servicer.VerificarDisponibilidade,
                    request_deserializer=agendamento__pb2.VerificarDisponibilidadeRequest.FromString,
                    response_serializer=agendamento__pb2.VerificarDisponibilidadeResponse.SerializeToString,
            ),
            'CancelarConsulta': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelarConsulta,
                    request_deserializer=agendamento__pb2.CancelarConsultaRequest.FromString,
                    response_serializer=agendamento__pb2.CancelarConsultaResponse.SerializeToString,
            ),
            'InscreverParaAtualizacoes': grpc.unary_stream_rpc_method_handler(
                    servicer.InscreverParaAtualizacoes,
                    request_deserializer=agendamento__pb2.SubscribeRequest.FromString,
                    response_serializer=agendamento__pb2.ListarConsultasResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agendamento.AgendamentoMedico', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agendamento.AgendamentoMedico', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgendamentoMedico(object):
    """Definição do serviço de agendamento
    """

    @staticmethod
    def AgendarConsulta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agendamento.AgendamentoMedico/AgendarConsulta',
            agendamento__pb2.AgendarConsultaRequest.SerializeToString,
            agendamento__pb2.AgendarConsultaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListarConsultas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agendamento.AgendamentoMedico/ListarConsultas',
            agendamento__pb2.SubscribeRequest.SerializeToString,
            agendamento__pb2.ListarConsultasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerificarDisponibilidade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agendamento.AgendamentoMedico/VerificarDisponibilidade',
            agendamento__pb2.VerificarDisponibilidadeRequest.SerializeToString,
            agendamento__pb2.VerificarDisponibilidadeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelarConsulta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agendamento.AgendamentoMedico/CancelarConsulta',
            agendamento__pb2.CancelarConsultaRequest.SerializeToString,
            agendamento__pb2.CancelarConsultaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InscreverParaAtualizacoes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/agendamento.AgendamentoMedico/InscreverParaAtualizacoes',
            agendamento__pb2.SubscribeRequest.SerializeToString,
            agendamento__pb2.ListarConsultasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
